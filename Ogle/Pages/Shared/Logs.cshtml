@using Ogle
@model LogsViewModel
@{
    ViewBag.Title = "View Logs";
}
<style>
    @@media (prefers-color-scheme: dark) {
        body {
            background-color: black;
            color: white;
        }
    }

    #logo {
        float: right;
        width: 112px;
        height: auto;
        margin-block: -5px;
        filter: grayscale(100%);
    }

    #ogleContainer {
        font-size: smaller;
    }

    #errorContainer {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        background-color: #ffdddd;
        color: red;
        border: 2px solid red;
        display: none;
        z-index: 1000;
        opacity: 0.9;
    }

    .closeButton {
        position: absolute;
        top: 0;
        right: 0;
        width: 21px;
        height: 21px;
        font-size: 32px;
        font-family: Arial, Helvetica, sans-serif;
        line-height: 0.5;
        scale: 0.6;
        cursor: pointer;
    }

    .errorMessage {
        margin: 5px 20px 5px 20px;
    }

    #logsContainer {
        margin-top: 10px;
        overflow: hidden;
        word-break: break-all;
        white-space: pre;
        max-height: 80vh;
    }

    #msg {
        display: none;
        margin-top: 10px;
        text-align: center;
        border: 2px solid #4070d0;
        background-color: lightyellow;
    }

    #loader {
        display: none;
        position: absolute;
        left: 50%;
        top: 50%;
        z-index: 1;
        width: 150px;
        height: 150px;
        margin: -75px 0 0 -75px;
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #3498db;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
    }

    pre {
        font-size: 0.9em !important;
    }

    .browseFilesContainer {
        max-width: 62%;
        /*        margin: auto;*/
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
    }

    .browseFilesContainer > pre::first-line {
        font-weight: bold;
    }

    .browseFilesContainer > pre:first-of-type::before {
        content: " ";
        position: absolute;
        border-bottom: 1px solid;
        width: 62%;
        height: 1.4em;
    }

    .browseFilesContainer > pre:last-of-type {
        text-align: right;
    }

    :not(.patternMatchValue) > .highlight {
        color: black;
    }

    .highlight {
        background-color: yellow;
    }

    .noMatch {
        font-style: italic;
    }

    .patternMatch {
        border: 1px dotted transparent;
    }

    .patternMatch:hover {
        border: 1px dotted;
    }

    :not(.errorMatch):not(.warningMatch) > .patternMatchValue {
        font-weight: bold;
    }

    @@media (prefers-color-scheme: light) {
        .errorMatch > .patternMatchValue {
            background-color: firebrick;
            color: white;
        }

        .warningMatch > .patternMatchValue {
            background-color: orange;
            color: black;
        }

        .patternMatch > .patternMatchValue {
            color: firebrick;
        }

        .mandatory.patternMatch > .patternMatchValue {
            color: #4070d0;
        }
    }

    @@media (prefers-color-scheme: dark) {
        .errorMatch > .patternMatchValue {
            background-color: #ff3030;
            color: white;
        }

        .warningMatch > .patternMatchValue {
            background-color: orange;
            color: black;
        }

        .patternMatch > .patternMatchValue {
            color: #ff3030;
        }

        .mandatory.patternMatch > .patternMatchValue {
            color: #4080ff;
        }
    }

    select option {
        color: initial;
    }

        select option[value=""] {
            color: gray;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .animate-bottom {
        position: relative;
        animation-name: animebottom;
        animation-duration: 1s;
    }

    @@keyframes animatebottom {
        from {
            bottom: -100px;
        }

        to {
            bottom: 0;
            opacity: 1
        }
    }
</style>

<div id="ogleContainer">
    <div id="errorContainer">
        <div class="closeButton" onclick="$(this).parent().hide();">&times;</div>
        <div class="errorMessage"></div>
    </div>

    <picture>
        <source media="(prefers-color-scheme: dark)" srcset="~/_content/Ogle/images/ogle-inverted.svg" />
        <source media="(prefers-color-scheme: light)" srcset="~/_content/Ogle/images/ogle.svg" />
        <img id="logo" src="~/_content/Ogle/images/ogle.svg" />
    </picture>

    <h2>@(ViewBag.Title)</h2>

    <div>
        <form>
            <label for="hostname">Date:</label>
            <input type="date" id="date" max="@DateTime.Today.ToString("yyyy-MM-dd")" value="@Model.Date?.ToString("yyyy-MM-dd")" />
            <select id="hostname">
                @{
                    var defaultSelected = string.IsNullOrWhiteSpace(Model.HostName) ? " selected=\"selected\"" : string.Empty;

                    @Html.Raw($"\t\t\t<option value=\"\"{defaultSelected}>Machine</option>\n");

                    foreach (var serverUrl in Model.ServerSelectList)
                    {
                        var serverName = serverUrl.Text;
                        var selected = string.Equals(Model.HostName, serverName, StringComparison.InvariantCultureIgnoreCase) ? " selected=\"selected\"" : string.Empty;

                        @Html.Raw($"\t\t\t<option value=\"{serverName}\"{selected}>{serverName}</options>\n");
                    }
                }
            </select>
            <input type="text" id="id" title="RequestId or a search term" placeholder="RequestId or a search term" style="width: 600px; max-width: 600px;" value="@(Model.Id)" />
            <input type="submit" id="showButton" value="Fetch request logs" onclick="redirect(); return false;" />
            <input type="submit" id="browseButton" value="Browse application logs" onclick="getLogFileList(); return false;" />
            <input type="checkbox" id="wordWrap" onclick="toggleWordWrap();" /> Wrap text
        </form>
    </div>
    <div id="loader" class="loader"></div>
    <div id="msg"></div>
    <div id="logsContainer"></div>
</div>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.0/dist/jquery.min.js"></script>
<script>
    function toggleWordWrap() {
        var wordWrap = $('#wordWrap').prop('checked');

        if (wordWrap) {
            $('#logsContainer').css('white-space', 'pre-wrap');
        } else {
            $('#logsContainer').css('white-space', 'pre');
        }
    }

    function updateDataForServer(url) {
        return $.ajax({
            url: url,
            xhrFields: {
                withCredentials: true
            },
            success: function (result, textStatus, request) {
                var mime = request.getResponseHeader('content-type');

                if (result != null && mime.indexOf('html') > -1) {
                    $('#logsContainer').append(result);
                    $('#logsContainer').css('overflow', 'auto');
                }
                else {
                    $('#msg').html(result);
                    $('#msg').show();
                }
            }
        });
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }

    function redirect() {
        var url = "/@(Model.RoutePrefix)/Index";
        var requestId = $('#id').val().trim();
        var date = $('#date').val();
        var hostname = $('#hostname').val();

        if (requestId) {
            var url = url + "?id=" + requestId;

            if (date) {
                url = url + "&date=" + date;
            }

            if (hostname) {
                url = url + "&hostname=" + hostname;
            }

            window.location.href = url;
        }
        else {
            $('#msg').html('No request id or search term specified');
            $('#msg').show();
            return;
        }
    }

    function getLogs() {
        $('#logsContainer').css('overflow', 'inherit');
        if ($('#id').val().trim() == '') {
            $('#msg').html('No request id or search term specified');
            $('#msg').show();
            return;
        }
        else if ($('#date').val() == '') {
            $('#msg').html('No date specified');
            $('#msg').show();
            return;
        }
        $('#logsContainer').html('');
        $('#msg').hide();
        $('#loader').show();

        var requests = [];
        requests.push(updateDataForServer('GetLogsFromAllServers?date=' + $('#date').val() + '&hostname=' + $('#hostname').val() + '&id=' + $('#id').val() + '&highlight={Model.Highlight}&rand=' + getRandomInt(1000)));

        $.when.apply($, requests).done(function () {
            $('#loader').hide();
        });
    }

    function getLogFileList() {
        $('#logsContainer').css('overflow', 'inherit');
        if ($('#hostname').val().trim() == '') {
            $('#msg').html('No machine specified');
            $('#msg').show();
            return;
        }

        $('#logsContainer').html('');
        $('#msg').hide();
        $('#loader').show();

        var requests = [];
        @{
            @Html.Raw("\n\t\t\tvar hostname=$(\"#hostname\").val();\n");

            foreach(var serverUrl in Model.ServerSelectList)
            {
                var serverName = serverUrl.Text;

                @Html.Raw($"\t\t\tif (!hostname || hostname == '{serverName}')\n");
                @Html.Raw("\t\t\t{\n");
                @Html.Raw($"\t\t\t\trequests.push(updateDataForServer('{serverUrl.Value}{Model.RoutePrefix}/BrowseLogFiles?date=' + $(\"#date\").val() + '&rand=' + getRandomInt(1000)));\n");
                @Html.Raw("\t\t\t}\n");
            }
        }
        $.when.apply($, requests).done(function () {
            $('#loader').hide();
        });
    }

    @if (Model.Id != null)
    {
        @Html.Raw("\t\t\tgetLogs();\n");
    }

    $.fn.extend({
        setColorBasedOnValue: function () {
            return this.each(function () {
                var value = $(this).val();

                if (value == '') {
                    $(this).css('color', 'gray');
                } else {
                    $(this).css('color', 'black');
                }
            });
        }
    });

    $(document).ready(function () {
        $('select,#date').setColorBasedOnValue();
        $('select,#date').change(function () {
            $(this).setColorBasedOnValue();
        });
    });

    $(document).on('ajaxError', function (event, request, ajaxSettings, errorMessage) {
        var message = request.responseText || "(null)";

        if (request.responseJSON && request.responseJSON.detail) {
            message = request.responseJSON.detail;
        }
        message = $('#errorContainer .errorMessage').text(message).html();
        message = message.replaceAll("\n", "\n<br />\n");

        $('#errorContainer .errorMessage').html('Error ' + request.status + ' received from ' + ajaxSettings.url + '\n<br />\n' + message);
        $('#errorContainer').show();
        $('#loader').hide();
    });
</script>